(* Generated by ocaml-tree-sitter. *)
(*
   make grammar

   entrypoint: makefile
*)

open! Sexplib.Conv
open Tree_sitter_run

type imm_tok_addp = Token.t (* "addprefix" *)

type imm_tok_prec_p1_at = Token.t (* "@" *)

type imm_tok_d = Token.t (* "D" *)

type imm_tok_pats = Token.t (* "patsubst" *)

type imm_tok_prec_p1_lt = Token.t (* "<" *)

type imm_tok_file = Token.t (* "file" *)

type imm_tok_strip = Token.t (* "strip" *)

type tok_rep1_choice_pat_549beab = Token.t

type tok_rep1_choice_choice_pat_c610685 = Token.t

type rawline = Token.t

type imm_tok_prec_p1_slash = Token.t (* "/" *)

type imm_tok_filt = Token.t (* "filter-out" *)

type tok_prec_p1_star = Token.t

type imm_tok_word_ = Token.t (* "wordlist" *)

type tok_prec_p1_lt = Token.t

type imm_tok_origin = Token.t (* "origin" *)

type imm_tok_prec_p1_plus = Token.t (* "+" *)

type anon_choice_EQ_67cadb9 = [
    `EQ of Token.t (* "=" *)
  | `COLONEQ of Token.t (* ":=" *)
  | `COLONCOLONEQ of Token.t (* "::=" *)
  | `QMARKEQ of Token.t (* "?=" *)
  | `PLUSEQ of Token.t (* "+=" *)
]

type imm_tok_call = Token.t (* "call" *)

type imm_tok_words = Token.t (* "words" *)

type imm_tok_colon = Token.t (* ":" *)

type imm_tok_base = Token.t (* "basename" *)

type tok_prec_p1_endef = Token.t

type imm_tok_fore = Token.t (* "foreach" *)

type imm_tok_prec_p1_star = Token.t (* "*" *)

type imm_tok_word = Token.t (* "word" *)

type tok_prec_p1_slash = Token.t

type imm_tok_dir = Token.t (* "dir" *)

type tok_prec_p1_plus = Token.t

type imm_tok_subst = Token.t (* "subst" *)

type imm_tok_prec_p1_hat = Token.t (* "^" *)

type imm_tok_adds = Token.t (* "addsuffix" *)

type imm_tok_filter = Token.t (* "filter" *)

type imm_tok_absp = Token.t (* "abspath" *)

type imm_tok_last = Token.t (* "lastword" *)

type imm_tok_wild = Token.t (* "wildcard" *)

type imm_tok_prec_p1_qmark = Token.t (* "?" *)

type word = Token.t

type imm_tok_semi = Token.t (* ";" *)

type imm_tok_rpar = Token.t (* ")" *)

type imm_tok_error = Token.t (* "error" *)

type imm_tok_info = Token.t (* "info" *)

type imm_tok_sort = Token.t (* "sort" *)

type imm_tok_real = Token.t (* "realpath" *)

type imm_tok_firs = Token.t (* "firstword" *)

type imm_tok_pat_ba5cc43 = Token.t (* pattern [\r\n]+ *)

type imm_tok_bslash_pat_7b301fa = Token.t

type imm_tok_eval = Token.t (* "eval" *)

type imm_tok_prec_p1_perc = Token.t (* "%" *)

type imm_tok_value = Token.t (* "value" *)

type imm_tok_pat_9713f58 = Token.t (* pattern [\t ]+ *)

type imm_tok_or = Token.t (* "or" *)

type tok_prec_n1_pat_d857316 = Token.t

type tok_prec_p1_perc = Token.t

type tok_prec_p1_qmark = Token.t

type imm_tok_find = Token.t (* "findstring" *)

type imm_tok_if = Token.t (* "if" *)

type imm_tok_suffix = Token.t (* "suffix" *)

type tok_prec_p1_dash = Token.t

type imm_tok_lcurl = Token.t (* "{" *)

type tok_prec_p1_hat = Token.t

type tok_prec_p1_at = Token.t

type imm_tok_lpar = Token.t (* "(" *)

type anon_choice_DOLLAR_5ccb3ec = [
    `DOLLAR of Token.t (* "$" *)
  | `DOLLARDOLLAR of Token.t (* "$$" *)
]

type imm_tok_pat_5058f1a = Token.t (* pattern . *)

type imm_tok_join = Token.t (* "join" *)

type imm_tok_warn = Token.t (* "warning" *)

type imm_tok_flavor = Token.t (* "flavor" *)

type imm_tok_f = Token.t (* "F" *)

type imm_tok_notdir = Token.t (* "notdir" *)

type imm_tok_and = Token.t (* "and" *)

type anon_choice_tok_prec_p1_at_dedbfd9 = [
    `Tok_prec_p1_at of tok_prec_p1_at (*tok*)
  | `Tok_prec_p1_perc of tok_prec_p1_perc (*tok*)
  | `Tok_prec_p1_lt of tok_prec_p1_lt (*tok*)
  | `Tok_prec_p1_qmark of tok_prec_p1_qmark (*tok*)
  | `Tok_prec_p1_hat of tok_prec_p1_hat (*tok*)
  | `Tok_prec_p1_plus of tok_prec_p1_plus (*tok*)
  | `Tok_prec_p1_slash of tok_prec_p1_slash (*tok*)
  | `Tok_prec_p1_star of tok_prec_p1_star (*tok*)
]

type anon_choice_imm_tok_d_c6ab400 = [
    `Imm_tok_d of imm_tok_d (*tok*)
  | `Imm_tok_f of imm_tok_f (*tok*)
]

type undefine_directive = (
    Token.t (* "undefine" *) * word (*tok*) * imm_tok_pat_ba5cc43
)

type define_directive = (
    Token.t (* "define" *)
  * word (*tok*)
  * imm_tok_pat_9713f58 option
  * anon_choice_EQ_67cadb9 option
  * imm_tok_pat_9713f58 option
  * imm_tok_pat_ba5cc43
  * rawline (*tok*) list (* one or more *) option
  * tok_prec_p1_endef (*tok*)
  * imm_tok_pat_ba5cc43
)

type anon_choice_var_beaec2e = [
    `Var of variable
  | `Func of function_
  | `DOLLARDOLLAR of Token.t (* "$$" *)
  | `SLASHSLASH of Token.t (* "//" *)
]

and arguments = (
    shell_command
  * (Token.t (* "," *) * shell_command) list (* zero or more *)
)

and function_ = [
    `Func_call of (
        anon_choice_DOLLAR_5ccb3ec
      * imm_tok_lpar (*tok*)
      * [
            `Imm_tok_subst of imm_tok_subst (*tok*)
          | `Imm_tok_pats of imm_tok_pats (*tok*)
          | `Imm_tok_strip of imm_tok_strip (*tok*)
          | `Imm_tok_find of imm_tok_find (*tok*)
          | `Imm_tok_filter of imm_tok_filter (*tok*)
          | `Imm_tok_filt of imm_tok_filt (*tok*)
          | `Imm_tok_sort of imm_tok_sort (*tok*)
          | `Imm_tok_word of imm_tok_word (*tok*)
          | `Imm_tok_words of imm_tok_words (*tok*)
          | `Imm_tok_word_ of imm_tok_word_ (*tok*)
          | `Imm_tok_firs of imm_tok_firs (*tok*)
          | `Imm_tok_last of imm_tok_last (*tok*)
          | `Imm_tok_dir of imm_tok_dir (*tok*)
          | `Imm_tok_notdir of imm_tok_notdir (*tok*)
          | `Imm_tok_suffix of imm_tok_suffix (*tok*)
          | `Imm_tok_base of imm_tok_base (*tok*)
          | `Imm_tok_adds of imm_tok_adds (*tok*)
          | `Imm_tok_addp of imm_tok_addp (*tok*)
          | `Imm_tok_join of imm_tok_join (*tok*)
          | `Imm_tok_wild of imm_tok_wild (*tok*)
          | `Imm_tok_real of imm_tok_real (*tok*)
          | `Imm_tok_absp of imm_tok_absp (*tok*)
          | `Imm_tok_error of imm_tok_error (*tok*)
          | `Imm_tok_warn of imm_tok_warn (*tok*)
          | `Imm_tok_info of imm_tok_info (*tok*)
          | `Imm_tok_origin of imm_tok_origin (*tok*)
          | `Imm_tok_flavor of imm_tok_flavor (*tok*)
          | `Imm_tok_fore of imm_tok_fore (*tok*)
          | `Imm_tok_if of imm_tok_if (*tok*)
          | `Imm_tok_or of imm_tok_or (*tok*)
          | `Imm_tok_and of imm_tok_and (*tok*)
          | `Imm_tok_call of imm_tok_call (*tok*)
          | `Imm_tok_eval of imm_tok_eval (*tok*)
          | `Imm_tok_file of imm_tok_file (*tok*)
          | `Imm_tok_value of imm_tok_value (*tok*)
        ]
      * imm_tok_pat_9713f58 option
      * arguments
      * Token.t (* ")" *)
    )
  | `Shell_func of (
        anon_choice_DOLLAR_5ccb3ec
      * imm_tok_lpar (*tok*)
      * Token.t (* "shell" *)
      * imm_tok_pat_9713f58 option
      * shell_command
      * Token.t (* ")" *)
    )
]

and list_ = (
    primary
  * (
        [
            `Imm_tok_pat_9713f58 of imm_tok_pat_9713f58
          | `Imm_tok_bslash_pat_7b301fa of imm_tok_bslash_pat_7b301fa
        ]
      * primary
    )
      list (* zero or more *)
  * imm_tok_pat_9713f58 option
)

and primary = [
    `Word of word (*tok*)
  | `Arch of (
        word (*tok*) * imm_tok_lpar (*tok*) * target_pattern
      * imm_tok_rpar (*tok*)
    )
  | `Var of variable
  | `Func of function_
  | `Conc of (primary * primary list (* one or more *))
  | `Str of string_
]

and shell_command = text

and string_ = [
    `DQUOT_opt_rep1_choice_var_DQUOT of (
        Token.t (* "\"" *)
      * string__ option
      * Token.t (* "\"" *)
    )
  | `SQUOT_opt_rep1_choice_var_SQUOT of (
        Token.t (* "'" *)
      * string__ option
      * Token.t (* "'" *)
    )
]

and string__ =
  [
      `Var of variable
    | `Func of function_
    | `Tok_prec_n1_pat_d857316 of tok_prec_n1_pat_d857316 (*tok*)
  ]
    list (* one or more *)

and target_pattern = list_

and text = [
    `Tok_rep1_choice_choice_pat_c610685_rep_choice_var_opt_tok_rep1_choice_choice_pat_c610685 of (
        tok_rep1_choice_choice_pat_c610685
      * (anon_choice_var_beaec2e * tok_rep1_choice_choice_pat_c610685 option)
          list (* zero or more *)
    )
  | `Choice_var_rep_opt_tok_rep1_choice_choice_pat_c610685_choice_var_opt_tok_rep1_choice_choice_pat_c610685 of (
        anon_choice_var_beaec2e
      * (tok_rep1_choice_choice_pat_c610685 option * anon_choice_var_beaec2e)
          list (* zero or more *)
      * tok_rep1_choice_choice_pat_c610685 option
    )
]

and variable = [
    `Var_ref of (
        anon_choice_DOLLAR_5ccb3ec
      * [
            `Choice_imm_tok_lpar_choice_word_RPAR of [
                `Imm_tok_lpar_choice_word_RPAR of (
                    imm_tok_lpar (*tok*) * primary * Token.t (* ")" *)
                )
              | `Imm_tok_lcurl_choice_word_RCURL of (
                    imm_tok_lcurl (*tok*) * primary * Token.t (* "}" *)
                )
            ]
          | `Imm_tok_pat_5058f1a of imm_tok_pat_5058f1a
        ]
    )
  | `Subs_ref of (
        anon_choice_DOLLAR_5ccb3ec
      * [
            `Imm_tok_lpar_choice_word_COLON_choice_word_EQ_choice_word_RPAR of (
                imm_tok_lpar (*tok*) * primary * Token.t (* ":" *) * primary
              * Token.t (* "=" *) * primary * Token.t (* ")" *)
            )
          | `Imm_tok_lcurl_choice_word_COLON_choice_word_EQ_choice_word_RCURL of (
                imm_tok_lcurl (*tok*) * primary * Token.t (* ":" *) * primary
              * Token.t (* "=" *) * primary * Token.t (* "}" *)
            )
        ]
    )
  | `Auto_var of (
        anon_choice_DOLLAR_5ccb3ec
      * [
            `Choice_imm_tok_prec_p1_at of [
                `Imm_tok_prec_p1_at of imm_tok_prec_p1_at (*tok*)
              | `Imm_tok_prec_p1_perc of imm_tok_prec_p1_perc (*tok*)
              | `Imm_tok_prec_p1_lt of imm_tok_prec_p1_lt (*tok*)
              | `Imm_tok_prec_p1_qmark of imm_tok_prec_p1_qmark (*tok*)
              | `Imm_tok_prec_p1_hat of imm_tok_prec_p1_hat (*tok*)
              | `Imm_tok_prec_p1_plus of imm_tok_prec_p1_plus (*tok*)
              | `Imm_tok_prec_p1_slash of imm_tok_prec_p1_slash (*tok*)
              | `Imm_tok_prec_p1_star of imm_tok_prec_p1_star (*tok*)
            ]
          | `Choice_imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR of [
                `Imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR of (
                    imm_tok_lpar (*tok*)
                  * anon_choice_tok_prec_p1_at_dedbfd9
                  * anon_choice_imm_tok_d_c6ab400 option
                  * Token.t (* ")" *)
                )
              | `Imm_tok_lcurl_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RCURL of (
                    imm_tok_lcurl (*tok*)
                  * anon_choice_tok_prec_p1_at_dedbfd9
                  * anon_choice_imm_tok_d_c6ab400 option
                  * Token.t (* "}" *)
                )
            ]
        ]
    )
]

type target_or_pattern_assignment = (
    target_pattern
  * Token.t (* ":" *)
  * imm_tok_pat_9713f58 option
)

type paths = (
    primary
  * (
        [
            `Imm_tok_colon of imm_tok_colon (*tok*)
          | `Imm_tok_semi of imm_tok_semi (*tok*)
        ]
      * primary
    )
      list (* zero or more *)
)

type unexport_directive = [
    `Unex_imm_tok_pat_ba5cc43 of (
        Token.t (* "unexport" *) * imm_tok_pat_ba5cc43
    )
  | `Unex_list_imm_tok_pat_ba5cc43 of (
        Token.t (* "unexport" *) * target_pattern * imm_tok_pat_ba5cc43
    )
]

type conditional_args_cmp = [
    `LPAR_opt_choice_word_COMMA_opt_choice_word_RPAR of (
        Token.t (* "(" *)
      * primary option
      * Token.t (* "," *)
      * primary option
      * Token.t (* ")" *)
    )
  | `Choice_word_choice_word of (primary * primary)
]

type normal_prerequisites = list_

type include_directive = [
    `Incl_list_imm_tok_pat_ba5cc43 of (
        Token.t (* "include" *) * target_pattern * imm_tok_pat_ba5cc43
    )
  | `Sinc_list_imm_tok_pat_ba5cc43 of (
        Token.t (* "sinclude" *) * target_pattern * imm_tok_pat_ba5cc43
    )
  | `DASH_list_imm_tok_pat_ba5cc43 of (
        Token.t (* "-include" *) * target_pattern * imm_tok_pat_ba5cc43
    )
]

type shell_text_without_split = [
    `Tok_rep1_choice_pat_549beab_rep_choice_var_opt_tok_rep1_choice_pat_549beab of (
        tok_rep1_choice_pat_549beab
      * (anon_choice_var_beaec2e * tok_rep1_choice_pat_549beab option)
          list (* zero or more *)
    )
  | `Choice_var_rep_opt_tok_rep1_choice_pat_549beab_choice_var_opt_tok_rep1_choice_pat_549beab of (
        anon_choice_var_beaec2e
      * (tok_rep1_choice_pat_549beab option * anon_choice_var_beaec2e)
          list (* zero or more *)
      * tok_rep1_choice_pat_549beab option
    )
]

type variable_assignment = (
    target_or_pattern_assignment option
  * word (*tok*)
  * imm_tok_pat_9713f58 option
  * anon_choice_EQ_67cadb9
  * imm_tok_pat_9713f58 option
  * shell_command option
  * imm_tok_pat_ba5cc43
)

type vpath_directive = [
    `Vpath_imm_tok_pat_ba5cc43 of (
        Token.t (* "vpath" *) * imm_tok_pat_ba5cc43
    )
  | `Vpath_word_imm_tok_pat_ba5cc43 of (
        Token.t (* "vpath" *) * word (*tok*) * imm_tok_pat_ba5cc43
    )
  | `Vpath_word_paths_imm_tok_pat_ba5cc43 of (
        Token.t (* "vpath" *) * word (*tok*) * paths * imm_tok_pat_ba5cc43
    )
]

type prerequisites = [
    `Normal_preres of normal_prerequisites
  | `Opt_normal_preres_BAR_list of (
        normal_prerequisites option
      * Token.t (* "|" *)
      * target_pattern
    )
]

type shell_text_with_split = (
    shell_text_without_split * imm_tok_bslash_pat_7b301fa
)

type export_directive = [
    `Export_imm_tok_pat_ba5cc43 of (
        Token.t (* "export" *) * imm_tok_pat_ba5cc43
    )
  | `Export_list_imm_tok_pat_ba5cc43 of (
        Token.t (* "export" *) * target_pattern * imm_tok_pat_ba5cc43
    )
  | `Export_var_assign of (Token.t (* "export" *) * variable_assignment)
]

type override_directive = [
    `Over_define_dire of (Token.t (* "override" *) * define_directive)
  | `Over_var_assign of (Token.t (* "override" *) * variable_assignment)
  | `Over_unde_dire of (Token.t (* "override" *) * undefine_directive)
]

type variable_definition = [
    `Vpath_assign of (
        Token.t (* "VPATH" *)
      * imm_tok_pat_9713f58 option
      * anon_choice_EQ_67cadb9
      * paths
      * imm_tok_pat_ba5cc43
    )
  | `Reci_assign of (
        Token.t (* ".RECIPEPREFIX" *)
      * imm_tok_pat_9713f58 option
      * anon_choice_EQ_67cadb9
      * shell_command
      * imm_tok_pat_ba5cc43
    )
  | `Var_assign of variable_assignment
  | `Shell_assign of (
        word (*tok*)
      * imm_tok_pat_9713f58 option
      * Token.t (* "!=" *)
      * imm_tok_pat_9713f58 option
      * shell_command
      * imm_tok_pat_ba5cc43
    )
  | `Define_dire of define_directive
]

type conditional_directives = [
    `Ifeq_dire of (
        Token.t (* "ifeq" *) * conditional_args_cmp * imm_tok_pat_ba5cc43
    )
  | `Ifneq_dire of (
        Token.t (* "ifneq" *) * conditional_args_cmp * imm_tok_pat_ba5cc43
    )
  | `Ifdef_dire of (Token.t (* "ifdef" *) * primary * imm_tok_pat_ba5cc43)
  | `Ifndef_dire of (Token.t (* "ifndef" *) * primary * imm_tok_pat_ba5cc43)
]

type recipe_line = (
    [
        `Tok_prec_p1_at of tok_prec_p1_at (*tok*)
      | `Tok_prec_p1_dash of tok_prec_p1_dash (*tok*)
      | `Tok_prec_p1_plus of tok_prec_p1_plus (*tok*)
    ]
      option
  * (
        shell_text_with_split
      * (Token.t (* "\t" *) option * shell_text_with_split)
          list (* zero or more *)
      * Token.t (* "\t" *) option
    )
      option
  * shell_text_without_split
)

type prefixed_recipe_line = (
    Token.t (* "\t" *)
  * recipe_line option
  * imm_tok_pat_ba5cc43
)

type attached_recipe_line = (Token.t (* ";" *) * recipe_line option)

type anon_choice_cond_8c6f069 = [
    `Cond of conditional
  | `Pref_recipe_line of prefixed_recipe_line
]

and anon_choice_recipe_9acf1ce = [
    `Recipe of recipe
  | `Imm_tok_pat_ba5cc43 of imm_tok_pat_ba5cc43
]

and conditional = (
    conditional_directives
  * conditional_consequence option
  * elsif_directive list (* zero or more *)
  * else_directive option
  * Token.t (* "endif" *)
  * imm_tok_pat_ba5cc43
)

and conditional_consequence =
  [ `Thing of thing | `Pref_recipe_line of prefixed_recipe_line ]
    list (* one or more *)

and directive = [
    `Incl_dire of include_directive
  | `Vpath_dire of vpath_directive
  | `Export_dire of export_directive
  | `Unex_dire of unexport_directive
  | `Over_dire of override_directive
  | `Unde_dire of undefine_directive
  | `Priv_dire of (Token.t (* "private" *) * variable_assignment)
  | `Cond of conditional
]

and else_directive = (
    Token.t (* "else" *)
  * imm_tok_pat_ba5cc43
  * conditional_consequence option
)

and elsif_directive = (
    Token.t (* "else" *)
  * conditional_directives
  * conditional_consequence option
)

and recipe = [
    `Atta_recipe_line_imm_tok_pat_ba5cc43_rep_choice_cond of (
        attached_recipe_line
      * imm_tok_pat_ba5cc43
      * anon_choice_cond_8c6f069 list (* zero or more *)
    )
  | `Imm_tok_pat_ba5cc43_rep1_choice_cond of (
        imm_tok_pat_ba5cc43
      * anon_choice_cond_8c6f069 list (* one or more *)
    )
]

and rule = [
    `Ordi_rule of (
        target_pattern
      * [
            `COLON of Token.t (* ":" *)
          | `AMPCOLON of Token.t (* "&:" *)
          | `COLONCOLON of Token.t (* "::" *)
        ]
      * imm_tok_pat_9713f58 option
      * prerequisites option
      * anon_choice_recipe_9acf1ce
    )
  | `Static_pat_rule of (
        target_pattern
      * Token.t (* ":" *)
      * imm_tok_pat_9713f58 option
      * target_pattern
      * Token.t (* ":" *)
      * imm_tok_pat_9713f58 option
      * target_pattern option
      * anon_choice_recipe_9acf1ce
    )
]

and thing = [
    `Rule of rule
  | `Var_defi of variable_definition
  | `Dire of directive
  | `Func_imm_tok_pat_ba5cc43 of (function_ * imm_tok_pat_ba5cc43)
]

type makefile = thing list (* zero or more *)

type comment (* inlined *) = Token.t

type recipeprefix (* inlined *) = Token.t (* "\t" *)

type name (* inlined *) = word (*tok*)

type automatic_variable (* inlined *) = (
    anon_choice_DOLLAR_5ccb3ec
  * [
        `Choice_imm_tok_prec_p1_at of [
            `Imm_tok_prec_p1_at of imm_tok_prec_p1_at (*tok*)
          | `Imm_tok_prec_p1_perc of imm_tok_prec_p1_perc (*tok*)
          | `Imm_tok_prec_p1_lt of imm_tok_prec_p1_lt (*tok*)
          | `Imm_tok_prec_p1_qmark of imm_tok_prec_p1_qmark (*tok*)
          | `Imm_tok_prec_p1_hat of imm_tok_prec_p1_hat (*tok*)
          | `Imm_tok_prec_p1_plus of imm_tok_prec_p1_plus (*tok*)
          | `Imm_tok_prec_p1_slash of imm_tok_prec_p1_slash (*tok*)
          | `Imm_tok_prec_p1_star of imm_tok_prec_p1_star (*tok*)
        ]
      | `Choice_imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR of [
            `Imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR of (
                imm_tok_lpar (*tok*)
              * anon_choice_tok_prec_p1_at_dedbfd9
              * anon_choice_imm_tok_d_c6ab400 option
              * Token.t (* ")" *)
            )
          | `Imm_tok_lcurl_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RCURL of (
                imm_tok_lcurl (*tok*)
              * anon_choice_tok_prec_p1_at_dedbfd9
              * anon_choice_imm_tok_d_c6ab400 option
              * Token.t (* "}" *)
            )
        ]
    ]
)

type archive (* inlined *) = (
    word (*tok*) * imm_tok_lpar (*tok*) * target_pattern
  * imm_tok_rpar (*tok*)
)

type concatenation (* inlined *) = (primary * primary list (* one or more *))

type function_call (* inlined *) = (
    anon_choice_DOLLAR_5ccb3ec
  * imm_tok_lpar (*tok*)
  * [
        `Imm_tok_subst of imm_tok_subst (*tok*)
      | `Imm_tok_pats of imm_tok_pats (*tok*)
      | `Imm_tok_strip of imm_tok_strip (*tok*)
      | `Imm_tok_find of imm_tok_find (*tok*)
      | `Imm_tok_filter of imm_tok_filter (*tok*)
      | `Imm_tok_filt of imm_tok_filt (*tok*)
      | `Imm_tok_sort of imm_tok_sort (*tok*)
      | `Imm_tok_word of imm_tok_word (*tok*)
      | `Imm_tok_words of imm_tok_words (*tok*)
      | `Imm_tok_word_ of imm_tok_word_ (*tok*)
      | `Imm_tok_firs of imm_tok_firs (*tok*)
      | `Imm_tok_last of imm_tok_last (*tok*)
      | `Imm_tok_dir of imm_tok_dir (*tok*)
      | `Imm_tok_notdir of imm_tok_notdir (*tok*)
      | `Imm_tok_suffix of imm_tok_suffix (*tok*)
      | `Imm_tok_base of imm_tok_base (*tok*)
      | `Imm_tok_adds of imm_tok_adds (*tok*)
      | `Imm_tok_addp of imm_tok_addp (*tok*)
      | `Imm_tok_join of imm_tok_join (*tok*)
      | `Imm_tok_wild of imm_tok_wild (*tok*)
      | `Imm_tok_real of imm_tok_real (*tok*)
      | `Imm_tok_absp of imm_tok_absp (*tok*)
      | `Imm_tok_error of imm_tok_error (*tok*)
      | `Imm_tok_warn of imm_tok_warn (*tok*)
      | `Imm_tok_info of imm_tok_info (*tok*)
      | `Imm_tok_origin of imm_tok_origin (*tok*)
      | `Imm_tok_flavor of imm_tok_flavor (*tok*)
      | `Imm_tok_fore of imm_tok_fore (*tok*)
      | `Imm_tok_if of imm_tok_if (*tok*)
      | `Imm_tok_or of imm_tok_or (*tok*)
      | `Imm_tok_and of imm_tok_and (*tok*)
      | `Imm_tok_call of imm_tok_call (*tok*)
      | `Imm_tok_eval of imm_tok_eval (*tok*)
      | `Imm_tok_file of imm_tok_file (*tok*)
      | `Imm_tok_value of imm_tok_value (*tok*)
    ]
  * imm_tok_pat_9713f58 option
  * arguments
  * Token.t (* ")" *)
)

type shell_function (* inlined *) = (
    anon_choice_DOLLAR_5ccb3ec
  * imm_tok_lpar (*tok*)
  * Token.t (* "shell" *)
  * imm_tok_pat_9713f58 option
  * shell_command
  * Token.t (* ")" *)
)

type substitution_reference (* inlined *) = (
    anon_choice_DOLLAR_5ccb3ec
  * [
        `Imm_tok_lpar_choice_word_COLON_choice_word_EQ_choice_word_RPAR of (
            imm_tok_lpar (*tok*) * primary * Token.t (* ":" *) * primary
          * Token.t (* "=" *) * primary * Token.t (* ")" *)
        )
      | `Imm_tok_lcurl_choice_word_COLON_choice_word_EQ_choice_word_RCURL of (
            imm_tok_lcurl (*tok*) * primary * Token.t (* ":" *) * primary
          * Token.t (* "=" *) * primary * Token.t (* "}" *)
        )
    ]
)

type variable_reference (* inlined *) = (
    anon_choice_DOLLAR_5ccb3ec
  * [
        `Choice_imm_tok_lpar_choice_word_RPAR of [
            `Imm_tok_lpar_choice_word_RPAR of (
                imm_tok_lpar (*tok*) * primary * Token.t (* ")" *)
            )
          | `Imm_tok_lcurl_choice_word_RCURL of (
                imm_tok_lcurl (*tok*) * primary * Token.t (* "}" *)
            )
        ]
      | `Imm_tok_pat_5058f1a of imm_tok_pat_5058f1a
    ]
)

type prerequisites_pattern (* inlined *) = list_

type ifndef_directive (* inlined *) = (
    Token.t (* "ifndef" *) * primary * imm_tok_pat_ba5cc43
)

type recipeprefix_assignment (* inlined *) = (
    Token.t (* ".RECIPEPREFIX" *)
  * imm_tok_pat_9713f58 option
  * anon_choice_EQ_67cadb9
  * shell_command
  * imm_tok_pat_ba5cc43
)

type ifdef_directive (* inlined *) = (
    Token.t (* "ifdef" *) * primary * imm_tok_pat_ba5cc43
)

type targets (* inlined *) = list_

type order_only_prerequisites (* inlined *) = list_

type shell_assignment (* inlined *) = (
    word (*tok*)
  * imm_tok_pat_9713f58 option
  * Token.t (* "!=" *)
  * imm_tok_pat_9713f58 option
  * shell_command
  * imm_tok_pat_ba5cc43
)

type vpath_assignment (* inlined *) = (
    Token.t (* "VPATH" *)
  * imm_tok_pat_9713f58 option
  * anon_choice_EQ_67cadb9
  * paths
  * imm_tok_pat_ba5cc43
)

type ifeq_directive (* inlined *) = (
    Token.t (* "ifeq" *) * conditional_args_cmp * imm_tok_pat_ba5cc43
)

type ifneq_directive (* inlined *) = (
    Token.t (* "ifneq" *) * conditional_args_cmp * imm_tok_pat_ba5cc43
)

type private_directive (* inlined *) = (
    Token.t (* "private" *) * variable_assignment
)

type ordinary_rule (* inlined *) = (
    target_pattern
  * [
        `COLON of Token.t (* ":" *)
      | `AMPCOLON of Token.t (* "&:" *)
      | `COLONCOLON of Token.t (* "::" *)
    ]
  * imm_tok_pat_9713f58 option
  * prerequisites option
  * anon_choice_recipe_9acf1ce
)

type static_pattern_rule (* inlined *) = (
    target_pattern
  * Token.t (* ":" *)
  * imm_tok_pat_9713f58 option
  * target_pattern
  * Token.t (* ":" *)
  * imm_tok_pat_9713f58 option
  * target_pattern option
  * anon_choice_recipe_9acf1ce
)

type extra = [ `Comment of Loc.t * comment ]

type extras = extra list
